5.Write a program for Implementation of K-Nearest Neighbours (K-NN) in Python
Aim:
To implement the K-Nearest Neighbors (K-NN) algorithm in Python and classify a new sample based on the nearest neighbors.
Procedure for K-Nearest Neighbors (K-NN) Algorithm:
•  Load the dataset with features and class labels.
•  Input the test sample and the value of k.
•  Calculate Euclidean distance between the test sample and all training points.
•  Select the k nearest neighbors based on the shortest distances.
•  Predict the class by majority voting among the k neighbors.

Code:
from math import sqrt
from collections import Counter
# Sample dataset: [feature1, feature2, ..., label]
dataset = [
    [2, 4, 'A'],
    [4, 2, 'A'],
    [4, 4, 'B'],
    [6, 2, 'B'],
    [6, 4, 'B']
]
# Euclidean distance function
def euclidean(p1, p2):
    return sqrt(sum((a - b) ** 2 for a, b in zip(p1, p2)))
# K-NN algorithm
def knn(data, query, k):
    distances = []
    for sample in data:
        dist = euclidean(sample[:-1], query)
        distances.append((dist, sample[-1]))
    distances.sort()  # sort by distance
    neighbors = distances[:k]
    classes = [label for _, label in neighbors]
    most_common = Counter(classes).most_common(1)[0][0]
    return most_common
# Test sample
test_point = [5, 3]
k = 3
# Predict
result = knn(dataset, test_point, k)
print("Test point:", test_point)
print("Predicted class:", result)


Input:
test_point = [5, 3]
k = 3
Output:
Test point: [5, 3]
Predicted class: B

